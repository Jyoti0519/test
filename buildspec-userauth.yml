version: 0.2

phases:
  pre_build:
    # Log in to ECR, and get an ECR Loging Token.  Since we have a connection after this point, we will be able to Push the Docker image
    # to ECR at a Later Point. 
    commands:
      - echo Logging in to Docker Hub...
      - echo $DOCKERHUB_PASSWORD | docker login --username $DOCKERHUB_USERNAME --password-stdin
  build:
    # Build the Docker Image from Dockerfile.
    # Once the Image has been built, the image tag needs to be updated to specify the Remote ECR Repository Name.
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - cd userauth
      - touch .env
      - echo "AWS_ACCESS_KEY = $AWS_ACCESS_KEY" >> .env                       
      - echo "AWS_SECRET_KEY = $AWS_SECRET_KEY" >> .env                        
      - echo "AWS_REGION = $AWS_REGION" >> .env                           
      - echo "MONGODB_URL = $MONGODB_URL" >> .env                         
      - echo "JWT_SECRET = $JWT_SECRET" >> .env                           
      - echo "JWT_TIMEOUT_DURATION = $JWT_TIMEOUT_DURATION" >> .env                 
      - echo "JWT_AUDIENCE = $JWT_AUDIENCE" >> .env                         
      - echo "STRIPE_KEY = $STRIPE_KEY" >> .env
      - echo "SENDGRID_API_KEY = $SENDGRID_API_KEY" >> .env
      #- echo "EMAIL_SMTP_HOST = $EMAIL_SMTP_HOST" >> .env                      
      #- echo "EMAIL_SMTP_PORT = $EMAIL_SMTP_PORT" >> .env                     
      #- echo "EMAIL_SMTP_USERNAME = $EMAIL_SMTP_USERNAME" >> .env                   
      #- echo "EMAIL_SMTP_PASSWORD = $EMAIL_SMTP_PASSWORD" >> .env                   
      ## true for 465, false for other ports 
      #- echo "EMAIL_SMTP_SECURE = $EMAIL_SMTP_SECURE" >> .env                     
      - echo "TWILIO_AUTHY_PROD_KEY = $TWILIO_AUTHY_PROD_KEY" >> .env                 
      - echo "TWILIO_ACCOUNT_SID = $TWILIO_ACCOUNT_SID" >> .env                    
      - echo "TWILIO_AUTH_TOKEN = $TWILIO_AUTH_TOKEN" >> .env                     
      - echo "TWILIO_VERIFY_SERVICE_SID = $TWILIO_VERIFY_SERVICE_SID" >> .env             
      - echo "TWILIO_VERIFY_SERVICE_SID_FOR_CUSTOMER = $TWILIO_VERIFY_SERVICE_SID_FOR_CUSTOMER" >> .env
      - echo "TWILIO_SENDER_ID = $TWILIO_SENDER_ID" >> .env
      - echo "SENDBIRD_APP_ID = $SENDBIRD_APP_ID" >> .env                       
      - echo "SENDBIRD_MASTER_API_TOKEN = $SENDBIRD_MASTER_API_TOKEN" >> .env             
      - echo "PORT = $PORT" >> .env                                 
      #- echo "RADIUS_UNIT = $RADIUS_UNIT" >> .env
      #- echo "USERAUTH_BASE_URL = $USERAUTH_BASE_URL" >> .env                    
      #- echo "STRIPE_SANDBOX_KEY = $STRIPE_SANDBOX_KEY" >> .env
      - docker build -t ${IMAGE_REPO_NAME} .
      - cd ..
      - docker tag ${IMAGE_REPO_NAME} ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${IMAGE_REPO_NAME}
  post_build:
    commands:
      - echo build Docker image complete `date`
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo push latest Docker images to ECR...
      - docker push ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${IMAGE_REPO_NAME}
      - printf '[{"name":"auth-micro-container","imageUri":"%s"}]' ${AWS_ACCOUNT_ID}.dkr.ecr.us-east-1.amazonaws.com/${IMAGE_REPO_NAME}:$IMAGE_TAG > imagedefinitions.json
artifacts:
    files: imagedefinitions.json
